//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Playe"",
            ""id"": ""78aa9a10-c03f-4772-a7d4-8368f864bcfb"",
            ""actions"": [
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""985dd7fb-66af-4aed-a843-f0562df43a3d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""222b1c38-2192-4d1f-b987-ff81a799540a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WeaponSwitch"",
                    ""type"": ""Button"",
                    ""id"": ""9869c36a-0f80-4113-aca5-f9f37d6ca648"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8422161a-b7d4-48e4-8d2e-2fa0139a8aad"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4385a8f6-47d2-49c4-872f-8ad4f194646f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""89ad938e-dadf-4b78-9e76-d03bdd8f0e6e"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WeaponSwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Playe
        m_Playe = asset.FindActionMap("Playe", throwIfNotFound: true);
        m_Playe_MousePosition = m_Playe.FindAction("MousePosition", throwIfNotFound: true);
        m_Playe_Fire = m_Playe.FindAction("Fire", throwIfNotFound: true);
        m_Playe_WeaponSwitch = m_Playe.FindAction("WeaponSwitch", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Playe
    private readonly InputActionMap m_Playe;
    private IPlayeActions m_PlayeActionsCallbackInterface;
    private readonly InputAction m_Playe_MousePosition;
    private readonly InputAction m_Playe_Fire;
    private readonly InputAction m_Playe_WeaponSwitch;
    public struct PlayeActions
    {
        private @PlayerInput m_Wrapper;
        public PlayeActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MousePosition => m_Wrapper.m_Playe_MousePosition;
        public InputAction @Fire => m_Wrapper.m_Playe_Fire;
        public InputAction @WeaponSwitch => m_Wrapper.m_Playe_WeaponSwitch;
        public InputActionMap Get() { return m_Wrapper.m_Playe; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayeActions set) { return set.Get(); }
        public void SetCallbacks(IPlayeActions instance)
        {
            if (m_Wrapper.m_PlayeActionsCallbackInterface != null)
            {
                @MousePosition.started -= m_Wrapper.m_PlayeActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_PlayeActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_PlayeActionsCallbackInterface.OnMousePosition;
                @Fire.started -= m_Wrapper.m_PlayeActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_PlayeActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_PlayeActionsCallbackInterface.OnFire;
                @WeaponSwitch.started -= m_Wrapper.m_PlayeActionsCallbackInterface.OnWeaponSwitch;
                @WeaponSwitch.performed -= m_Wrapper.m_PlayeActionsCallbackInterface.OnWeaponSwitch;
                @WeaponSwitch.canceled -= m_Wrapper.m_PlayeActionsCallbackInterface.OnWeaponSwitch;
            }
            m_Wrapper.m_PlayeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
                @WeaponSwitch.started += instance.OnWeaponSwitch;
                @WeaponSwitch.performed += instance.OnWeaponSwitch;
                @WeaponSwitch.canceled += instance.OnWeaponSwitch;
            }
        }
    }
    public PlayeActions @Playe => new PlayeActions(this);
    public interface IPlayeActions
    {
        void OnMousePosition(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnWeaponSwitch(InputAction.CallbackContext context);
    }
}
